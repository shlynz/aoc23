use itertools::Itertools;

advent_of_code::solution!(9);

pub fn part_one(input: &str) -> Option<u32> {
    input
        .lines()
        .map(|line| {
            line.split_whitespace()
                .map(|val| val.parse::<i32>().unwrap())
                .collect_vec()
        })
        .map(|nrs| vec![nrs])
        .for_each(|val| println!("{val:?}"));
    //.map(|nrs| {
    //    nrs.fold_while(init, f)
    //    let diff =
    //    nrs.tuple_windows()
    //        .map(|(first, second)| second - first)
    //        .collect_vec()
    //})
    //.for_each(|val| println!("{val:?}"));
    None
}

pub fn part_two(input: &str) -> Option<u32> {
    None
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_part_one() {
        let result = part_one(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, Some(68));
    }

    #[test]
    fn test_part_two() {
        let result = part_two(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, None);
    }
}
